/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_car_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	"fmt"

	api "github.com/weaveworks/libgitops/cmd/sample-app/apis/sample"

	log "github.com/sirupsen/logrus"
	"github.com/weaveworks/libgitops/pkg/runtime"
	"github.com/weaveworks/libgitops/pkg/storage"
	"github.com/weaveworks/libgitops/pkg/storage/filterer"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CarClient is an interface for accessing Car-specific API objects
type CarClient interface {
	// New returns a new Car
	New() *api.Car
	// Get returns the Car matching given UID from the storage
	Get(runtime.UID) (*api.Car, error)
	// Set saves the given Car into persistent storage
	Set(*api.Car) error
	// Patch performs a strategic merge patch on the object with
	// the given UID, using the byte-encoded patch given
	Patch(runtime.UID, []byte) error
	// Find returns the Car matching the given filter, filters can
	// match e.g. the Object's Name, UID or a specific property
	Find(filter filterer.BaseFilter) (*api.Car, error)
	// FindAll returns multiple Cars matching the given filter, filters can
	// match e.g. the Object's Name, UID or a specific property
	FindAll(filter filterer.BaseFilter) ([]*api.Car, error)
	// Delete deletes the Car with the given UID from the storage
	Delete(uid runtime.UID) error
	// List returns a list of all Cars available
	List() ([]*api.Car, error)
}

// Cars returns the CarClient for the Client object
func (c *SampleInternalClient) Cars() CarClient {
	if c.carClient == nil {
		c.carClient = newCarClient(c.storage, c.gv)
	}

	return c.carClient
}

// carClient is a struct implementing the CarClient interface
// It uses a shared storage instance passed from the Client together with its own Filterer
type carClient struct {
	storage  storage.Storage
	filterer *filterer.Filterer
	gvk      schema.GroupVersionKind
}

// newCarClient builds the carClient struct using the storage implementation and a new Filterer
func newCarClient(s storage.Storage, gv schema.GroupVersion) CarClient {
	return &carClient{
		storage:  s,
		filterer: filterer.NewFilterer(s),
		gvk:      gv.WithKind(api.KindCar.Title()),
	}
}

// New returns a new Object of its kind
func (c *carClient) New() *api.Car {
	log.Tracef("Client.New; GVK: %v", c.gvk)
	obj, err := c.storage.New(c.gvk)
	if err != nil {
		panic(fmt.Sprintf("Client.New must not return an error: %v", err))
	}
	return obj.(*api.Car)
}

// Find returns a single Car based on the given Filter
func (c *carClient) Find(filter filterer.BaseFilter) (*api.Car, error) {
	log.Tracef("Client.Find; GVK: %v", c.gvk)
	object, err := c.filterer.Find(c.gvk, filter)
	if err != nil {
		return nil, err
	}

	return object.(*api.Car), nil
}

// FindAll returns multiple Cars based on the given Filter
func (c *carClient) FindAll(filter filterer.BaseFilter) ([]*api.Car, error) {
	log.Tracef("Client.FindAll; GVK: %v", c.gvk)
	matches, err := c.filterer.FindAll(c.gvk, filter)
	if err != nil {
		return nil, err
	}

	results := make([]*api.Car, 0, len(matches))
	for _, item := range matches {
		results = append(results, item.(*api.Car))
	}

	return results, nil
}

// Get returns the Car matching given UID from the storage
func (c *carClient) Get(uid runtime.UID) (*api.Car, error) {
	log.Tracef("Client.Get; UID: %q, GVK: %v", uid, c.gvk)
	object, err := c.storage.Get(c.gvk, uid)
	if err != nil {
		return nil, err
	}

	return object.(*api.Car), nil
}

// Set saves the given Car into the persistent storage
func (c *carClient) Set(car *api.Car) error {
	log.Tracef("Client.Set; UID: %q, GVK: %v", car.GetUID(), c.gvk)
	return c.storage.Set(c.gvk, car)
}

// Patch performs a strategic merge patch on the object with
// the given UID, using the byte-encoded patch given
func (c *carClient) Patch(uid runtime.UID, patch []byte) error {
	return c.storage.Patch(c.gvk, uid, patch)
}

// Delete deletes the Car from the storage
func (c *carClient) Delete(uid runtime.UID) error {
	log.Tracef("Client.Delete; UID: %q, GVK: %v", uid, c.gvk)
	return c.storage.Delete(c.gvk, uid)
}

// List returns a list of all Cars available
func (c *carClient) List() ([]*api.Car, error) {
	log.Tracef("Client.List; GVK: %v", c.gvk)
	list, err := c.storage.List(c.gvk)
	if err != nil {
		return nil, err
	}

	results := make([]*api.Car, 0, len(list))
	for _, item := range list {
		results = append(results, item.(*api.Car))
	}

	return results, nil
}
